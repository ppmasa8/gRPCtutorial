// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: proto/grpc-tutorial.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RockScissorsPaperServiceClient is the client API for RockScissorsPaperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RockScissorsPaperServiceClient interface {
	PlayGame(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error)
	ReportMatchResults(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error)
}

type rockScissorsPaperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRockScissorsPaperServiceClient(cc grpc.ClientConnInterface) RockScissorsPaperServiceClient {
	return &rockScissorsPaperServiceClient{cc}
}

func (c *rockScissorsPaperServiceClient) PlayGame(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*PlayResponse, error) {
	out := new(PlayResponse)
	err := c.cc.Invoke(ctx, "/tutorial.RockScissorsPaperService/PlayGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rockScissorsPaperServiceClient) ReportMatchResults(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportResponse, error) {
	out := new(ReportResponse)
	err := c.cc.Invoke(ctx, "/tutorial.RockScissorsPaperService/ReportMatchResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RockScissorsPaperServiceServer is the server API for RockScissorsPaperService service.
// All implementations should embed UnimplementedRockScissorsPaperServiceServer
// for forward compatibility
type RockScissorsPaperServiceServer interface {
	PlayGame(context.Context, *PlayRequest) (*PlayResponse, error)
	ReportMatchResults(context.Context, *ReportRequest) (*ReportResponse, error)
}

// UnimplementedRockScissorsPaperServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRockScissorsPaperServiceServer struct {
}

func (UnimplementedRockScissorsPaperServiceServer) PlayGame(context.Context, *PlayRequest) (*PlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayGame not implemented")
}
func (UnimplementedRockScissorsPaperServiceServer) ReportMatchResults(context.Context, *ReportRequest) (*ReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMatchResults not implemented")
}

// UnsafeRockScissorsPaperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RockScissorsPaperServiceServer will
// result in compilation errors.
type UnsafeRockScissorsPaperServiceServer interface {
	mustEmbedUnimplementedRockScissorsPaperServiceServer()
}

func RegisterRockScissorsPaperServiceServer(s grpc.ServiceRegistrar, srv RockScissorsPaperServiceServer) {
	s.RegisterService(&RockScissorsPaperService_ServiceDesc, srv)
}

func _RockScissorsPaperService_PlayGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockScissorsPaperServiceServer).PlayGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.RockScissorsPaperService/PlayGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockScissorsPaperServiceServer).PlayGame(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RockScissorsPaperService_ReportMatchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RockScissorsPaperServiceServer).ReportMatchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.RockScissorsPaperService/ReportMatchResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RockScissorsPaperServiceServer).ReportMatchResults(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RockScissorsPaperService_ServiceDesc is the grpc.ServiceDesc for RockScissorsPaperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RockScissorsPaperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tutorial.RockScissorsPaperService",
	HandlerType: (*RockScissorsPaperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlayGame",
			Handler:    _RockScissorsPaperService_PlayGame_Handler,
		},
		{
			MethodName: "ReportMatchResults",
			Handler:    _RockScissorsPaperService_ReportMatchResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/grpc-tutorial.proto",
}
